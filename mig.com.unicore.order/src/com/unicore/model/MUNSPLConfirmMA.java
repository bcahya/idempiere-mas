/**
 * 
 */
package com.unicore.model;

import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.Properties;

import org.adempiere.exceptions.AdempiereException;
import org.compiere.model.MAttributeSet;
import org.compiere.model.MAttributeSetInstance;
import org.compiere.util.DB;
import org.compiere.util.Env;
import org.compiere.util.Util;

import com.uns.base.model.Query;

import com.unicore.model.factory.UNSOrderModelFactory;

/**
 * @author UNTA_Andy
 *
 */
public class MUNSPLConfirmMA extends X_UNS_PL_ConfirmMA
{

	/**
	 * 
	 */
	private static final long serialVersionUID = -3024572743485603552L;
	private MUNSPLConfirmProduct m_parent = null;
	

	/**
	 * @param ctx
	 * @param UNS_PL_ConfirmMA_ID
	 * @param trxName
	 */
	public MUNSPLConfirmMA(Properties ctx, int UNS_PL_ConfirmMA_ID, String trxName)
	{
		super(ctx, UNS_PL_ConfirmMA_ID, trxName);
		// TODO Auto-generated constructor stub
	}
	
	/**
	 * 
	 */
	public MUNSPLConfirmProduct getParent()
	{
		if(null == m_parent)
			m_parent = new MUNSPLConfirmProduct(getCtx(), getUNS_PL_ConfirmProduct_ID(), get_TrxName());
		return m_parent;
	}
	
	/**
	 * 
	 * @param parent
	 */
	protected void setParent(MUNSPLConfirmProduct parent)
	{
		m_parent = parent;
	}
	
	
	/**
	 * 
	 * @param parent
	 */
	public MUNSPLConfirmMA(MUNSPLConfirmProduct parent)
	{
		super(parent.getCtx(), 0, parent.get_TrxName());
		setUNS_PL_ConfirmProduct_ID(parent.get_ID());
		setClientOrg(parent.getAD_Client_ID(), parent.getAD_Org_ID());
		setParent(parent);
	}
	
	public MUNSPLConfirmMA(MUNSPLConfirmProduct parent, int M_AttributeSetInstance_ID, Timestamp dateMPolicy)
	{
		this(parent);
		if (M_AttributeSetInstance_ID > 0)
			setM_AttributeSetInstance_ID(M_AttributeSetInstance_ID);
		
		if (dateMPolicy == null)
		{
			if (M_AttributeSetInstance_ID > 0)
			{
				MAttributeSetInstance asi = new MAttributeSetInstance(parent.getCtx(), M_AttributeSetInstance_ID, parent.get_TrxName());
				dateMPolicy = Util.removeTime(asi.getCreated());
			}
			else
			{
				dateMPolicy = parent.getParent().getDateDoc();
			}
		}
		setDateMaterialPolicy(dateMPolicy);
	}
	
	/**
	 * Get the PLConfirmMA if exists, or create new otherwise.
	 * @param parent
	 * @param M_AttributeSetInstance_ID
	 * @param dateMPolicy
	 * @return The PLConfirmMA if exists, or create new otherwise.
	 */
	public static MUNSPLConfirmMA getCreate(MUNSPLConfirmProduct parent, int M_AttributeSetInstance_ID, Timestamp dateMPolicy)
	{
		dateMPolicy = Util.removeTime(dateMPolicy);
		MUNSPLConfirmMA retMA =
				Query.get(parent.getCtx(), UNSOrderModelFactory.EXTENSION_ID, Table_Name, 
						"UNS_PL_ConfirmProduct_ID=? AND M_AttributeSetInstance_ID = ? AND DateMaterialPolicy = ?"
						, parent.get_TrxName())
				.setParameters(parent.get_ID(), M_AttributeSetInstance_ID, dateMPolicy)
				.first();
		if (retMA == null)
		{
			retMA = new MUNSPLConfirmMA(parent, M_AttributeSetInstance_ID, dateMPolicy);
			retMA.setIsAutoGenerated(true);
		}
		
		return retMA;
	}

	/**
	 * @param ctx
	 * @param rs
	 * @param trxName
	 */
	public MUNSPLConfirmMA(Properties ctx, ResultSet rs, String trxName)
	{
		super(ctx, rs, trxName);
	}
	
	@Override
	protected boolean beforeSave(boolean newRecord)
	{
		boolean isUPCChanged = is_ValueChanged(COLUMNNAME_UPC);
		
		if (isUPCChanged && getUPC() != null && !getUPC().isEmpty())
		{
			String whereClause = "M_AttributeSet_ID=(SELECT M_AttributeSet_ID FROM M_Product "
					+ "WHERE M_Product_ID=(SELECT M_Product_ID FROM UNS_PL_ConfirmProduct "
					+ " WHERE UNS_PL_ConfirmProduct_ID=?))";
			MAttributeSet attrset = 
					new Query(getCtx(), MAttributeSet.Table_Name, whereClause, get_TrxName())
					.setParameters(getUNS_PL_ConfirmProduct_ID()).first();
			
			String sql = "SELECT ai.M_AttributeSetInstance_ID FROM M_AttributeInstance ai "
					+ "WHERE ai.M_Attribute_ID=? AND ai.Value=?";
			
			int asi_id = DB.getSQLValueEx(get_TrxName(), sql, attrset.getUPCAttribute_ID(), getUPC());
			
			if (asi_id > 0) 
			{
				if (!getParent().getParent().isShipment())
				{
					//Check if the ASI is on the PL Confirm list. Note: It is the PL Confirm List not PL Return Confirm.
					sql = "SELECT M_AttributeSetInstance_ID FROM UNS_PL_ConfirmMA WHERE UNS_PL_ConfirmProduct_ID IN ("
							+ "	SELECT UNS_PL_ConfirmProduct_ID FROM UNS_PL_ConfirmProduct "
							+ "	WHERE UNS_PL_Confirm_ID=(SELECT UNS_PL_Confirm_ID FROM UNS_PL_Confirm "
							+ "		WHERE UNS_PackingList_ID=(SELECT UNS_PackingList_ID FROM UNS_PL_Return "
							+ "			WHERE UNS_PL_Return_ID=(SELECT UNS_PL_Return_ID FROM UNS_PL_Confirm "
							+ "				WHERE UNS_PL_Confirm_ID=?))))";
					
					int existingASI_ID = DB.getSQLValueEx(get_TrxName(), sql, getParent().getUNS_PL_Confirm_ID());
				
					if (existingASI_ID < 0)
						throw new AdempiereException("Cannot reclaim non existence UPC on PL Confirm List.");
				}
				
				setM_AttributeSetInstance_ID(asi_id);
				setIsAutoGenerated(false);
				if (attrset.isUniqueUPCPerUnit())
					setMovementQty(Env.ONE);
			}
			else {
				throw new AdempiereException("Cannot find AttributeSetInstance for UPC String of " + getUPC());
			}
		}
		
		if(get_Value(COLUMNNAME_M_AttributeSetInstance_ID) == null)
			setM_AttributeSetInstance_ID(0);
		
		return true;
	} // beforeSave
	
	@Override
	protected boolean afterSave(boolean newRecord, boolean success)
	{
		if (isAutoGenerated())
			return true;

		String errMsg = updateHeader();
		if (errMsg != null)
			throw new AdempiereException(errMsg);
		
		return true;
	} // afterSave

	@Override
	protected boolean afterDelete(boolean success)
	{
		if (isAutoGenerated())
			return true;

		String errMsg = updateHeader();
		if (errMsg != null)
			throw new AdempiereException(errMsg);
		
		return true;
	}
	
	/**
	 * Update header based on changes made on this PL Confirm Attributes.
	 * 
	 * @return An error message if error occurred, null otherwise.
	 */
	protected String updateHeader()
	{
		String errMsg = null;
		
		String sql = "UPDATE UNS_PL_ConfirmProduct SET MovementQty=? WHERE UNS_PL_ConfirmProduct_ID=?";
		
		Object[] params = new Object[]{getTotalQty(false, getUNS_PL_ConfirmProduct_ID(), get_TrxName()), 
									   getUNS_PL_ConfirmProduct_ID()};
		
		int count = DB.executeUpdateEx(sql, params, get_TrxName());
		
		if (count == 0)
			errMsg = "Failed while updating Packing List Product's movement quantity.";
	
		return errMsg;
	} // updateHeader
	
	/**
	 * Get the total of movement quantity for only auto generated or all line MA.
	 * @param onlyNonAutoGenerated
	 * @return
	 */
	protected static BigDecimal getTotalQty(boolean onlyNonAutoGenerated, int PLConfirmProduct_ID, String trxName)
	{
		String sql = "SELECT SUM(MovementQty) FROM UNS_PL_ConfirmMA WHERE UNS_PL_ConfirmProduct_ID=?";
		
		if (onlyNonAutoGenerated)
			 sql += " AND IsAutoGenerated='N'";
		
		BigDecimal retTotal = DB.getSQLValueBDEx(trxName, sql, PLConfirmProduct_ID);
		
		if (retTotal == null)
			retTotal = Env.ZERO;
		
		return retTotal;
	} // getTotalQty
}
