/**
 * 
 */
package com.unicore.model;

import java.io.File;
import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.Hashtable;
import java.util.List;
import java.util.Properties;

import org.adempiere.exceptions.AdempiereException;
import org.compiere.model.MPayment;
import org.compiere.model.MPaymentAllocate;
import org.compiere.model.ModelValidationEngine;
import org.compiere.model.ModelValidator;
import org.compiere.process.DocAction;
import org.compiere.process.DocOptions;
import org.compiere.process.DocumentEngine;
import org.compiere.util.AdempiereUserError;
import org.compiere.util.DB;
import org.compiere.util.Env;
import org.compiere.util.Msg;
import org.compiere.util.Util;

import com.unicore.model.factory.UNSFinanceModelFactory;
import com.uns.base.model.Query;
import com.uns.model.GeneralCustomization;
import com.uns.model.MUNSBilling;
import com.uns.model.MUNSBillingLine;
import com.uns.model.MUNSCustomerBG;
import com.uns.model.MUNSCustomerBGAction;
import com.uns.model.MUNSCustomerBGInvList;

/**
 * @author setyaka
 * 
 */
public class MUNSBillingGroupResult extends X_UNS_BillingGroup_Result implements DocAction, DocOptions {

	/**
	 * 
	 */
	private static final long serialVersionUID = 8972895728065927008L;

	private String m_processMsg;
	private boolean m_force = false;

	/**
	 * @param ctx
	 * @param UNS_BillingGroup_Result_ID
	 * @param trxName
	 */
	public MUNSBillingGroupResult(Properties ctx, int UNS_BillingGroup_Result_ID, String trxName) {
		super(ctx, UNS_BillingGroup_Result_ID, trxName);
		// TODO Auto-generated constructor stub
	}

	/**
	 * @param ctx
	 * @param rs
	 * @param trxName
	 */
	public MUNSBillingGroupResult(Properties ctx, ResultSet rs, String trxName) {
		super(ctx, rs, trxName);
		// TODO Auto-generated constructor stub
	}

	public MUNSBillingGroupResult(MUNSBillingGroup bg) {
		this(bg.getCtx(), 0, bg.get_TrxName());

		setClientOrg(bg);
		setUNS_BillingGroup_ID(bg.get_ID());
		setIsAutoGenerated(true);;
		setDateDoc(bg.getDateDoc());
		setDocAction(DOCACTION_Prepare);
		setDocStatus(DOCSTATUS_Drafted);
		setIsAutoGenerated(true);
		setIsApproved(false);
		setProcessed(false);
		setDifferenceAmt(Env.ZERO);
		setGrandTotal(Env.ZERO);
	}

	public boolean isForce() {
		return m_force;
	}

	public void setForce(boolean force) {
		this.m_force = force;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.compiere.process.DocOptions#customizeValidActions(java.lang.String,
	 * java.lang.Object, java.lang.String, java.lang.String, int, java.lang.String[],
	 * java.lang.String[], int)
	 */
	@Override
	public int customizeValidActions(String docStatus, Object processing, String orderType, String isSOTrx,
			int AD_Table_ID, String[] docAction, String[] options, int index) {
		// If status = Drafted, add "Prepare" in the list
		if (docStatus.equals(DocumentEngine.STATUS_Drafted) || docStatus.equals(DocumentEngine.STATUS_Invalid))
		{
			options[index++] = DocumentEngine.ACTION_Prepare;
		}

		// If status = Completed, add "Reactivate" in the list
		if (docStatus.equals(DocumentEngine.STATUS_Completed))
		{
			options[index++] = DocumentEngine.ACTION_ReActivate;
			options[index++] = DocumentEngine.ACTION_Void;
		}
		
		if(docStatus.equals(DocumentEngine.STATUS_InProgress))
		{
			options[index++] = DocumentEngine.ACTION_ReActivate;
		}

		return index;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.compiere.process.DocAction#processIt(java.lang.String)
	 */
	@Override
	public boolean processIt(String processAction) throws Exception {
		m_processMsg = null;
		DocumentEngine engine = new DocumentEngine(this, getDocStatus());
		return engine.processIt(processAction, getDocAction());
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.compiere.process.DocAction#unlockIt()
	 */
	@Override
	public boolean unlockIt() {
		log.info("unlockIt - " + toString());
		setProcessed(false);
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.compiere.process.DocAction#invalidateIt()
	 */
	@Override
	public boolean invalidateIt() {
		log.info(toString());
		setDocAction(DOCACTION_Prepare);
		return true;
	}
	
	String generateKey(int id, int org_id) {
		return (new StringBuilder(id).append("-").append(org_id)).toString();
	};

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.compiere.process.DocAction#prepareIt()
	 */
	@Override
	public String prepareIt() {
		log.info(toString());
		m_processMsg = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.TIMING_BEFORE_PREPARE);
		if (m_processMsg != null)
			return DocAction.STATUS_Invalid;
		
		if(checkGiro() != null)
			throw new AdempiereUserError(m_processMsg);
		
		MUNSPReceiptGroup group = MUNSPReceiptGroup.getOfResult(getCtx(), get_ID(), get_TrxName());
		if(group != null && group.isComplete())
		{
			if(group.getPaidAmt().compareTo(getPaidAmt()) != 0)
			{
				m_processMsg = "Between the amount of receipt and "
						+ " the amount entered should be the same."
						+ "\nReceipt Amount :: " + group.getPaidAmt().setScale(2)
						+ "\nEntered Amount :: " + getPaidAmt().setScale(2)
						+ "\nDifference Amount :: " + ((getPaidAmt().subtract(group.getPaidAmt())).abs()).setScale(2);
				return DocAction.STATUS_Invalid;
			}
		}
		
		m_processMsg = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.TIMING_AFTER_PREPARE);
		if (m_processMsg != null)
			return DocAction.STATUS_Invalid;
		setProcessed(true);
		m_justPrepared = true;
//		if (!DOCACTION_Complete.equals(getDocAction()))
//			setDocAction(DOCACTION_Complete);
		return DocAction.STATUS_InProgress;
	}
	

	/**
	 * 
	 * @param blr
	 */
	private void createCustomerBG(MUNSBillingLineResult blr) {
		if(blr.getUNS_CustomerBG_ID() == 0)
		{
			blr.createCustomerBGFromList();
			return;
		}
		
		MUNSCustomerBG giro = new MUNSCustomerBG(getCtx(), blr.getUNS_CustomerBG_ID(), get_TrxName());

		MUNSCustomerBGInvList invlist = MUNSCustomerBGInvList.get(blr.get_ID(), giro.get_ID(), get_TrxName());
		if(null == invlist)
		{
			invlist = new MUNSCustomerBGInvList(giro);
			invlist.setUNS_BillingLine_Result_ID(blr.get_ID());
			invlist.setNetAmtToInvoice(blr.getNetAmtToInvoice());
			invlist.setPaidAmt(blr.getPaidAmtGiro());
			invlist.setC_Invoice_ID(blr.getC_Invoice_ID());

			if (!invlist.save())
				throw new AdempiereException("Error while trying create Invoice Billed Giro " + giro.getName());
		}
		
		if (giro.getLinesBGAction(true)== null || giro.getLinesBGAction(false).length <= 0)
		{
			MUNSCustomerBGAction action = new MUNSCustomerBGAction(giro);
			action.saveEx();
		}
	}


	/** Just Prepared Flag */
	private boolean m_justPrepared = false;

	private MUNSBillingResult[] m_lines;

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.compiere.process.DocAction#approveIt()
	 */
	@Override
	public boolean approveIt() {
		log.info(toString());
		 setIsApproved(true);
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.compiere.process.DocAction#rejectIt()
	 */
	@Override
	public boolean rejectIt() {
		log.info(toString());
		setProcessed(false);
		setIsApproved(false);
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.compiere.process.DocAction#completeIt()
	 */
	@Override
	public String completeIt() {
		m_processMsg = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.TIMING_BEFORE_COMPLETE);
		if (m_processMsg != null)
			return DocAction.STATUS_Invalid;
		log.info(toString());

		// Re-Check
		if (!m_justPrepared)
		{
			String status = prepareIt();
			if (!DocAction.STATUS_InProgress.equals(status))
				return status;
		}

		m_processMsg = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.TIMING_AFTER_COMPLETE);
		if (m_processMsg != null)
			return DocAction.STATUS_Invalid;


		Hashtable<String, MUNSPaymentReceipt> cache = new Hashtable<>();
		MUNSPReceiptGroup group = null;
		group = MUNSPReceiptGroup.getOfResult(getCtx(), get_ID(), get_TrxName());
		if(group == null || !group.isComplete())
		{
			if(group == null)
			{
				group = new MUNSPReceiptGroup(getCtx(), 0, get_TrxName());
				group.setAD_Org_ID(getAD_Org_ID());
				group.setDescription(getDescription());
				group.setUNS_BillingGroup_ID(getUNS_BillingGroup_ID());
				group.setUNS_BillingGroup_Result_ID(get_ID());
				group.setSalesRep_ID(DB.getSQLValue(get_TrxName(), 
						"SELECT SalesRep_ID FROM UNS_BillingGroup WHERE UNS_BillingGroup_ID=?",
						getUNS_BillingGroup_ID()));
				group.setDateReceived(getDateDoc());
				group.saveEx();
			}
			else if(!group.isComplete())
			{
				for(MUNSPaymentReceipt r : group.getLines(true))
				{
					r.deleteEx(false, get_TrxName());
				}
			}
			
			MUNSBillingResult[] lines = getLines();
			
			for (MUNSBillingResult br : lines)
			{
				MUNSBillingLineResult[] results = br.getLines(true);
				for (MUNSBillingLineResult blr : results)
				{
					if(blr.isNotPaid() || blr.isHandover())
						continue;
					
					if(blr.getPaymentStatus().equals(MUNSBillingLineResult.PAYMENTSTATUS_PaidByTransfer))
					{
						group.setAmountTrf(group.getAmountTrf().add(blr.getAmountTrf()));
						group.saveEx();
						continue;
					}
					
					if(blr.getPaymentStatus().equals(MUNSBillingLineResult.PAYMENTSTATUS_PaidByCashAndGiro)
							|| blr.getPaymentStatus().equals(MUNSBillingLineResult.PAYMENTSTATUS_PaidByGiro))
					{
						blr.validateGiro(false);
					}
					
					blr.setReceiptAmt(blr.getPaidAmt());
					
					if (blr.isGiro())
					{
						createCustomerBG(blr);
					}
					
					String key = generateKey(get_ID(), blr.getAD_Org_ID());
					MUNSPaymentReceipt payReceipt = cache.get(key);
					if(null == payReceipt)
					{
						payReceipt = MUNSPaymentReceipt.get(get_TrxName(), get_ID(), blr.getAD_Org_ID());
						if(null == payReceipt)
						{
							payReceipt = new MUNSPaymentReceipt(this);
							payReceipt.setAD_Org_ID(blr.getAD_Org_ID());
						}
						else
						{
							payReceipt.setToZero();
						}
						
						if(payReceipt.getUNS_PReceipt_Group_ID() > 0)
						{
							group = new MUNSPReceiptGroup(
									getCtx(), payReceipt.getUNS_PReceipt_Group_ID(), get_TrxName());
						}
						
						if(payReceipt.getUNS_PReceipt_Group_ID() <= 0)
							payReceipt.setUNS_PReceipt_Group_ID(group.get_ID());
						
						cache.put(key, payReceipt);
					}
	
					blr.saveEx();
					payReceipt.setPaidAmt(payReceipt.getPaidAmt().add(blr.getPaidAmt()));
					payReceipt.setPaidAmtGiro(payReceipt.getPaidAmtGiro().add(blr.getPaidAmtGiro()));
					payReceipt.setReceiptAmt(payReceipt.getReceiptAmt().add(blr.getReceiptAmt()));
					payReceipt.saveEx();
				}
			}
		}
		else if(group != null && group.isComplete())
		{
			int allocation_ID =
					GeneralCustomization.get_ID(get_TrxName(), MUNSPRAllocation.Table_Name,
							COLUMNNAME_UNS_BillingGroup_Result_ID, "=", (Integer) get_ID());
			
			for (MUNSBillingResult br : getLines())
			{
				MPayment payment = null;
				for (MUNSBillingLineResult blr : br.getLines(true))
				{
					if(!blr.isHasReceipt() && blr.getPaidAmt().signum() != 0)
					{
						String pay = "SELECT p.C_Payment_ID FROM C_Payment p"
								+ " WHERE p.UNS_PR_Allocation_ID = ? AND p.C_BPartner_ID = ?"
								+ " AND p.AD_Org_ID = ? AND p.DocStatus NOT IN ('CO', 'CL', 'VO', 'RE')";
						int idPay = DB.getSQLValue(get_TrxName(), pay, new Object[]
								{allocation_ID, br.getUNS_Billing().getC_BPartner_ID(), blr.getAD_Org_ID()});
						
						BigDecimal openInvoice = DB.getSQLValueBD(
								get_TrxName(), "SELECT InvoiceOpen(?, ?)", blr.getC_Invoice_ID(), 0);
						
						if (idPay <= 0)
						{
							payment = new MPayment(getCtx(), 0, get_TrxName());
							payment.setAD_Org_ID(blr.getAD_Org_ID());
							payment.setUNS_PR_Allocation_ID(allocation_ID);
							payment.setAmount(getC_Currency_ID(), blr.getReceiptAmt());
							payment.setC_DocType_ID(true);
							payment.setC_BPartner_ID((Integer) GeneralCustomization.getColumn_ID(get_TrxName(),
									MUNSBilling.Table_Name, MUNSBilling.COLUMNNAME_C_BPartner_ID,
									MUNSBillingResult.COLUMNNAME_UNS_Billing_ID, "=", br.getUNS_Billing_ID()));
							String sql = "SELECT pr.C_BankAccount_ID FROM UNS_PaymentReceipt pr WHERE"
									+ " pr.UNS_BillingGroup_Result_ID = ? AND pr.AD_Org_ID = ?";
							int idBankAccount = DB.getSQLValue(get_TrxName(), sql, get_ID(), blr.getAD_Org_ID());
							payment.setBankCash(idBankAccount, true, MPayment.TENDERTYPE_Cash);
							
							int salesID = DB.getSQLValue(get_TrxName(), "SELECT bg.SalesRep_ID FROM UNS_BillingGroup_Result bgr"
									+ " INNER JOIN UNS_BillingGroup bg ON bgr.UNS_BillingGroup_ID = bg.UNS_BillingGroup_ID "
									+ " WHERE bgr.UNS_BillingGroup_Result_ID =  "+getUNS_BillingGroup_Result_ID());
							payment.setSalesRep_ID(salesID);
							
							Timestamp dateReceipt = DB.getSQLValueTS(get_TrxName(), 
									"SELECT DateReceived FROM UNS_PReceipt_Group "
									+ " WHERE UNS_BillingGroup_Result_ID = ?", 
									get_ID());
							if (null != dateReceipt)
							{
								payment.setDateTrx(dateReceipt);
								payment.setDateAcct(dateReceipt);
							}
							
							if (!payment.save())
								throw new AdempiereException("Error while tray create Payment");					
						}
						else
							payment = new MPayment(getCtx(), idPay, get_TrxName());
				
						MPaymentAllocate pa = new MPaymentAllocate(getCtx(), 0, get_TrxName());
						pa.setAD_Org_ID(blr.getAD_Org_ID());
						pa.setC_Payment_ID(payment.get_ID());
						pa.setC_Invoice_ID(blr.getC_Invoice_ID());
						pa.setAmount(blr.getPaidAmt());
						pa.setPayToOverUnderAmount(blr.getPaidAmt());
						pa.setOverUnderAmt(openInvoice.subtract(blr.getPaidAmt()));
						pa.setWriteOffAmt(blr.getWriteOffAmt());
						pa.setOverUnderAmt(openInvoice.subtract((blr.getPaidAmt().add(blr.getWriteOffAmt()))));
						pa.setInvoiceAmt(blr.getNetAmtToInvoice());

						if (!pa.save())
//							throw new AdempiereException("Error while tray create Payment Allocate");
							throw new AdempiereException("Error while tray create Payment Allocate (" 
										+ blr.getC_Invoice().getDocumentNo() + ")");
						
						//recreate model for get new update of pay amount.
						payment = new MPayment(getCtx(), payment.getC_Payment_ID(), get_TrxName());
						
						MUNSBillingLine bl = (MUNSBillingLine) blr.getUNS_BillingLine();
						bl.setPaidAmt(blr.getReceiptAmt());
						bl.saveEx();
						
						if(blr.getC_Invoice_ID() > 0)
						{
							blr.setNetAmtToInvoice(openInvoice);
							blr.setC_PaymentAllocate_ID(pa.get_ID());
							blr.setIsHasReceipt(true);
							blr.setReceiptAmt(blr.getPaidAmt());
							blr.saveEx();
						}
						
						DB.executeUpdate("UPDATE UNS_Handover_Inv SET InvoiceCollectionType = 'HP'"
								+ " WHERE UNS_BillingLine_Result_ID = ?", blr.get_ID(), get_TrxName());
					}
				}
			}
		}
		if(!Util.isEmpty(m_processMsg, true))
		{
			return DocAction.STATUS_InProgress;
		}

		// MUNSHandover handover = MUNSHandover.get(this);
		// if (handover == null
		// || !(handover.getDocStatus().equals(STATUS_Completed) ||
		// handover.getDocStatus().equals(STATUS_Closed)))
		// m_processMsg = "Please complete Billing Result Checklist";
		// if (m_processMsg != null)
		// return DocAction.STATUS_InProgress;

		// m_processMsg = info.toString();

		setDocAction(DOCACTION_Close);
		return DocAction.STATUS_Completed;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.compiere.process.DocAction#voidIt()
	 */
	@Override
	public boolean voidIt() {
		log.info(toString());
		// Before Void
		m_processMsg = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.TIMING_BEFORE_VOID);
		if (m_processMsg != null)
			return false;

		// Set up Description as voided
		MUNSBillingResult[] blines = getLines();
		if (blines.length > 0)
		{
			for (MUNSBillingResult bc : blines)
			{
				bc.setDescription((bc.getDescription() == null ? "" : bc.getDescription())
						+ " Voided (Old Amount : " + bc.getTotalAmt() + ")");
				bc.save(get_TrxName());
				System.out.println(bc.getUNS_Billing_Result_ID());
			}
		}
		System.out.println();
		setDescription(getDocumentNo().concat(Msg.getMsg(getCtx(), "Voided")));

		// After Void
		m_processMsg = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.TIMING_AFTER_VOID);
		if (m_processMsg != null)
			return false;

		setProcessed(true);
		setDocAction(DOCACTION_None);

		return true;
	}

	/**************************************************************************
	 * Get Orders
	 * 
	 * @param whereClause where clause or null (starting with AND)
	 * @param orderClause order clause
	 * @return orders
	 */
	public MUNSBillingResult[] getLines(String whereClause, String orderClause) {
		// red1 - using new Query class from Teo / Victor's MDDOrder.java
		// implementation
		StringBuilder whereClauseFinal =
				new StringBuilder(MUNSBillingResult.COLUMNNAME_UNS_BillingGroup_Result_ID + "=? ");
		if (!Util.isEmpty(whereClause, true))
			whereClauseFinal.append(whereClause);
		if (orderClause.length() == 0)
			orderClause = MUNSBillingResult.COLUMNNAME_UNS_Billing_Result_ID;
		//
		List<MUNSBillingResult> list =
				Query.get(getCtx(), UNSFinanceModelFactory.EXTENSION_ID, MUNSBillingResult.Table_Name,
						whereClauseFinal.toString(), get_TrxName()).setParameters(get_ID())
						.setOrderBy(orderClause).list();

		return list.toArray(new MUNSBillingResult[list.size()]);
	} // getLines

	/**
	 * Get Lines of Order
	 * 
	 * @param requery requery
	 * @param orderBy optional order by column
	 * @return lines
	 */
	public MUNSBillingResult[] getLines(boolean requery, String orderBy) {
		if (m_lines != null && !requery)
		{
			set_TrxName(m_lines, get_TrxName());
			return m_lines;
		}
		//
		String orderClause = "";
		if (orderBy != null && orderBy.length() > 0)
			orderClause += orderBy;

		m_lines = getLines(null, orderClause);
		return m_lines;
	} // getLines

	/**
	 * Get Lines of Order. (used by web store)
	 * 
	 * @return lines
	 */
	public MUNSBillingResult[] getLines() {
		return getLines(false, null);
	} // getLines

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.compiere.process.DocAction#closeIt()
	 */
	@Override
	public boolean closeIt() {
		log.info(toString());
		// Before Close
		m_processMsg = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.TIMING_BEFORE_CLOSE);
		if (m_processMsg != null)
			return false;
		// After Close
		m_processMsg = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.TIMING_AFTER_CLOSE);
		if (m_processMsg != null)
			return false;
		setDocAction(DOCACTION_None);
		return true;
	}

	@Override
	public boolean reverseAccrualIt() {
		log.info(toString());
		// Before reverseAccrual
		m_processMsg =
				ModelValidationEngine.get().fireDocValidate(this, ModelValidator.TIMING_BEFORE_REVERSEACCRUAL);
		if (m_processMsg != null)
			return false;

		// After reverseAccrual
		m_processMsg =
				ModelValidationEngine.get().fireDocValidate(this, ModelValidator.TIMING_AFTER_REVERSEACCRUAL);
		if (m_processMsg != null)
			return false;

		return false;
	}

	@Override
	public boolean reverseCorrectIt() {
		log.info(toString());
		// Before reverseCorrect
		m_processMsg =
				ModelValidationEngine.get().fireDocValidate(this, ModelValidator.TIMING_BEFORE_REVERSECORRECT);
		if (m_processMsg != null)
			return false;

		// After reverseCorrect
		m_processMsg =
				ModelValidationEngine.get().fireDocValidate(this, ModelValidator.TIMING_AFTER_REVERSECORRECT);
		if (m_processMsg != null)
			return false;

		return voidIt();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.compiere.process.DocAction#reActivateIt()
	 */
	@Override
	public boolean reActivateIt() {

		log.info(toString());
		// Before reActivate
		m_processMsg = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.TIMING_BEFORE_REACTIVATE);
		if (m_processMsg != null)
			return false;
		
		MUNSPReceiptGroup group = MUNSPReceiptGroup.getOfResult(getCtx(), get_ID(), get_TrxName());
		if(group != null && !group.isComplete())
		{
			String sqlPRecipt = "SELECT DocumentNo FROM UNS_PReceipt_Group WHERE UNS_PReceipt_Group_ID IN "
					+ " (SELECT COALESCE(UNS_PReceipt_Group_ID,0) FROM UNS_PaymentReceipt WHERE DocStatus IN ('CO', 'CL')"
					+ " AND UNS_BillingGroup_Result_ID = ?)";
			String docNo = DB.getSQLValueString(get_TrxName(), sqlPRecipt, get_ID());
			if(!Util.isEmpty(docNo, true))
				throw new AdempiereUserError("Cannot reactivate this document,"
						+ " Billing Payment Receipt has processed. (" + docNo + ")");
			else
			{
				String sqlPRGroup = "SELECT UNS_PReceipt_Group_ID FROM UNS_PaymentReceipt WHERE UNS_BillingGroup_Result_ID = " + get_ID();
				int idPRGroup = DB.getSQLValue(get_TrxName(), sqlPRGroup);
			
				String delPReceipt = "DELETE FROM UNS_PaymentReceipt WHERE UNS_PReceipt_Group_ID = " + idPRGroup;
				String delPRGroup = "DELETE FROM UNS_PReceipt_Group WHERE UNS_PReceipt_Group_ID = " + idPRGroup;
				String delInvList = "DELETE FROM UNS_CustomerBG_InvList WHERE UNS_BillingLine_Result_ID IN"
						+ " (SELECT UNS_BillingLine_Result_ID FROM UNS_BillingLine_Result WHERE UNS_Billing_Result_ID IN"
						+ " (SELECT UNS_Billing_Result_ID FROM UNS_Billing_Result WHERE UNS_BillingGroup_Result_ID = " + get_ID()
						+ " ))";
				
				DB.executeUpdate(delInvList, get_TrxName());
				DB.executeUpdate(delPReceipt, get_TrxName());
				DB.executeUpdate(delPRGroup, get_TrxName());
			}
			
			MUNSBillingResult[] lines = getLines(); 
			for (MUNSBillingResult br : lines)
			{
				MUNSBillingLineResult[] results = br.getLines(true);
				for (MUNSBillingLineResult blr : results)
				{				
					if(blr.isPaid())
					{
						blr.setReceiptAmt(blr.getPaidAmt().subtract(blr.getReceiptAmt()));
						if(!blr.save())
						{
							m_processMsg = "Failed when trying update receipt amount in billing line result";
							return false;
						}
					}
				}
			}
		}
		else if(group != null && group.isComplete())
		{
			String sql = "SELECT pra.DocStatus FROM UNS_PR_Allocation pra WHERE EXISTS"
					+ " (SELECT 1 FROM UNS_PaymentReceipt pr WHERE pr.UNS_PaymentReceipt_ID"
					+ " = pra.UNS_PaymentReceipt_ID AND pr.UNS_BillingGroup_Result_ID = ?)";
			String status = DB.getSQLValueString(get_TrxName(), sql, get_ID());
			if(status.equals("CO") || status.equals("CL"))
			{
				m_processMsg = "Allocation has completed, please contact admin.";
				return false;
			}
		}

		// After reActivate
		m_processMsg = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.TIMING_AFTER_REACTIVATE);
		if (m_processMsg != null)
			return false;
		
		setProcessed(false);
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.compiere.process.DocAction#getSummary()
	 */
	@Override
	public String getSummary() {
		StringBuffer sb = new StringBuffer();
		sb.append(getDocumentNo());
		// : Total Lines = 123.00 (#1)
		sb.append(": ").append(Msg.translate(getCtx(), "GrandTotal")).append("=").append(this.getGrandTotal());
		// - Description
		if (getDescription() != null && getDescription().length() > 0)
			sb.append(" - ").append(getDescription());
		return sb.toString();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.compiere.process.DocAction#getDocumentInfo()
	 */
	@Override
	public String getDocumentInfo() {

		return "Grouping Billing Result" + getDocumentNo();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.compiere.process.DocAction#createPDF()
	 */
	@Override
	public File createPDF() {
		// TODO Auto-generated method stub
		return null;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.compiere.process.DocAction#getProcessMsg()
	 */
	@Override
	public String getProcessMsg()
	{
		return m_processMsg;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.compiere.process.DocAction#getDoc_User_ID()
	 */
	@Override
	public int getDoc_User_ID() {

		return getCreatedBy();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.compiere.process.DocAction#getC_Currency_ID()
	 */
	@Override
	public int getC_Currency_ID() {
		// TODO Auto-generated method stub
		return 0;
	}

	public static boolean createBGResult(MUNSBillingGroup bg) {
		MUNSBillingGroupResult newBGC = new MUNSBillingGroupResult(bg);

		if (newBGC.save())
		{
			for (MUNSBilling bil : bg.getLines(true))
			{
				MUNSBillingResult newBilC = new MUNSBillingResult(newBGC);
				newBilC.setUNS_Billing_ID(bil.get_ID());

				if (newBilC.save())
				{
					for (MUNSBillingLine bl : bil.getLines(true))
					{
						MUNSBillingLineResult newblc = new MUNSBillingLineResult(newBilC);
						newblc.setUNS_BillingLine_ID(bl.get_ID());
						newblc.setC_Invoice_ID(bl.getC_Invoice_ID());
						newblc.setNetAmtToInvoice(bl.getNetAmtToInvoice());

						if (!newblc.save())
							return false;
						bl.setProcessed(true);
						bl.saveEx();
					}
				}
				else
					return false;
			}
		}
		else
			return false;

		return true;
	}

	@Override
	public BigDecimal getApprovalAmt() {

		return getPaidAmt();
	}
	
	public static MUNSBillingGroupResult getByBillingGroup (Properties ctx, int UNS_BillingGroup_ID, String trxName)
	{
		MUNSBillingGroupResult bgResult = null;
		bgResult = new Query(ctx, Table_Name, COLUMNNAME_UNS_BillingGroup_ID+"=?",
				trxName).setParameters(UNS_BillingGroup_ID).first();
		
		return bgResult;
	}
	
	public String checkGiro()
	{
		m_processMsg = null;
		
		String cekGiroList = "SELECT UNS_BillingLine_Result_ID FROM UNS_BillingLine_Giro WHERE UNS_BillingLine_Result_ID IN"
				+ " (SELECT UNS_BillingLine_Result_ID FROM UNS_BillingLine_Result WHERE PaymentStatus IN ('CG', 'PG')"
				+ "  AND UNS_Billing_Result_ID IN"
				+ " (SELECT UNS_Billing_Result_ID FROM UNS_Billing_Result WHERE UNS_BillingGroup_Result_ID="+ get_ID() +"))"
				+ " AND UNS_CustomerBG_ID IS NULL";
		int idGiroList = DB.getSQLValue(get_TrxName(), cekGiroList);
		
		if(idGiroList >= 1)
		{
			MUNSBillingLineResult lResult = new MUNSBillingLineResult(getCtx(), idGiroList, get_TrxName());
			
			m_processMsg = "Not Defined Giro (" + lResult.getUNS_Billing_Result().getUNS_Billing().getC_BPartner().getName()
					+ " - " + lResult.getUNS_BillingLine().getC_Invoice().toString() + ")";
		}
		else
		{
			String cekResultLine = "SELECT UNS_BillingLine_Result_ID FROM UNS_BillingLine_Result WHERE UNS_Billing_Result_ID IN"
					+ " (SELECT UNS_Billing_Result_ID FROM UNS_Billing_Result WHERE UNS_BillingGroup_Result_ID ="+ get_ID() +")"
					+ " AND PaymentStatus IN ('CG', 'PG') AND UNS_CustomerBG_ID IS NULL AND UNS_BillingLine_Result_ID NOT IN"
					+ " (SELECT UNS_BillingLine_Result_ID FROM UNS_BillingLine_Giro)";
			int idResultLine = DB.getSQLValue(get_TrxName(), cekResultLine);
			
			if(idResultLine >= 1)
			{
				MUNSBillingLineResult lResult = new MUNSBillingLineResult(getCtx(), idResultLine, get_TrxName());
				
				m_processMsg = "Not Defined Giro (" + lResult.getUNS_Billing_Result().getUNS_Billing().getC_BPartner().getName()
						+ " - " + lResult.getUNS_BillingLine().getC_Invoice().toString() + ")";
			}
		}
		
		return m_processMsg;
	}
}